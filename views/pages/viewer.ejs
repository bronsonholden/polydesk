<div class="container-fluid d-flex h-100 flex-column">
  <div class="row border border-bottom-1 border-top-0 border-left-0 border-right-0 border-secondary">
    <div class="w-100">
      <nav class="navbar navbar-justify-content-left navbar-fixed-top justify-content-between">
        <div>
          <button type="button" class="btn btn-light btn-outline-primary document-viewer-apply">Apply</button>
          <button type="button" class="btn btn-light btn-outline-primary document-viewer-save">Save</button>
          <button type="button" class="btn btn-light btn-outline-secondary document-viewer-close">Close</button>
        </div>
        <div>
          <button type="button" class="btn rounded-circle btn-light btn-outline-secondary viewer-action" data-toggle="tooltip" data-placement="bottom" title="Add Metadata Template"><i class="ion-code"></i></button>
        </div>
        <div>
          <button type="button" class="btn rounded-circle btn-light btn-outline-secondary viewer-action" data-toggle="tooltip" data-placement="bottom" title="Zoom In"><i class="ion-plus"></i></button>
          <button type="button" class="btn rounded-circle btn-light btn-outline-secondary viewer-action" data-toggle="tooltip" data-placement="bottom" title="Zoom Out"><i class="ion-minus"></i></button>
        </div>
      </nav>
    </div>
  </div>
  <div class="row d-flex" style="flex: 1;">
    <div id="properties" class="col-md-3 p-0">
      <%- include('viewer/metadata.ejs', {
        metadataSets: metadataSets
      }); %>
    </div>
    <div id="viewer" class="pdf-viewer m-0 col-md-9 border bg-secondary-op" data-url="<%- documentUrl -%>">
      <div id="search" class="modal" role="dialog">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Search</h5>
            </div>
            <div class="modal-body">
              <input id="search-input" type="text" placeholder="Enter your search text"></input>
            </div>
            <div class="modal-footer">
              <button id="search-next-result" type="button" class="btn">Next</button>
            </div>
          </div>
        </div>
      </div>
      <div id="growls-viewer"></div>
    </div>
  </div>
</div>

<script>
  $(document).ready(function () {
    $('[data-toggle="tooltip"]').tooltip();

    $(document).on('click', '.viewer-action', function () {
      var self = this;

      setTimeout(function () {
        self.blur();
      }, 150);
    });

    $(document).on('click', '.metadata-set-lock', function () {
      var set = $(this).closest('.metadata-set');

      if (!set.attr('locked')) {
        set.attr('locked', 'locked');

        set.find('.metadata-field').removeClass('input-group');
        set.find('.metadata-field .input-group-prepend').removeClass('input-group-prepend metadata-field-editable').addClass('input-group-prepend-locked hidden');
        set.find('.metadata-field .input-group-append').removeClass('input-group-append metadata-field-editable').addClass('input-group-append-locked hidden');

        // Lock formula fields down, show calculated value
        set.find('.metadata-field input[fieldtype="F"]').each(function () {
          $(this).val($(this).attr('calculated'));
          $(this).prop('readonly', true);
        });

        // Make data fields editable
        set.find('.metadata-field input[fieldtype!="F"]').each(function () {
          $(this).removeAttr('readonly');
        });

        $(this).find('i').removeClass('ion-unlocked').addClass('ion-locked');
      } else {
        set.removeAttr('locked');

        set.find('.metadata-field').addClass('input-group');
        set.find('.metadata-field .input-group-prepend-locked').addClass('input-group-prepend metadata-field-editable').removeClass('input-group-prepend-locked hidden');
        set.find('.metadata-field .input-group-append-locked').addClass('input-group-append metadata-field-editable').removeClass('input-group-append-locked hidden');

        // Show formula string, allow editing
        set.find('.metadata-field input[fieldtype="F"]').each(function () {
          $(this).val(decodeURI($(this).attr('formula')));
          $(this).removeAttr('readonly');
        });

        // Disallow data field edits
        set.find('.metadata-field input[fieldtype!="F"]').each(function () {
          $(this).prop('readonly', true);
        });

        $(this).find('i').removeClass('ion-locked').addClass('ion-unlocked');
      }
    });

    // Move a field up
    $(document).on('click', '.metadata-field-move-up', function () {
      var current = $(this).closest('.form-group');
      var prev = current.prevAll('.form-group:first');

      if (prev.length !== 1) {
        return;
      }

      var currentOrder = current.find('.form-control').attr('fieldorder');
      var prevOrder = prev.find('.form-control').attr('fieldorder');

      current.insertBefore(prev);
      current.find('.form-control').attr('fieldorder', prevOrder);
      prev.find('.form-control').attr('fieldorder', currentOrder);
    });

    // Move a field down
    $(document).on('click', '.metadata-field-move-down', function () {
      var current = $(this).closest('.form-group');
      var next = current.nextAll('.form-group:first');

      if (next.length !== 1) {
        return;
      }

      var currentOrder = current.find('.form-control').attr('fieldorder');
      var nextOrder = next.find('.form-control').attr('fieldorder');

      current.insertAfter(next);
      current.find('.form-control').attr('fieldorder', nextOrder);
      next.find('.form-control').attr('fieldorder', currentOrder);
    });

    // Move an item up
    $(document).on('click', '.metadata-field-move-item-up', function () {
      var current = $(this).closest('.metadata-field');
      var prev = current.prevAll('.metadata-field:first');

      if (prev.length !== 1) {
        return;
      }

      var currentOrder = current.find('.form-control').attr('fieldorder');
      var prevOrder = prev.find('.form-control').attr('fieldorder');

      current.insertBefore(prev);
    });

    // Move an item down
    $(document).on('click', '.metadata-field-move-item-down', function () {
      var current = $(this).closest('.metadata-field');
      var next = current.nextAll('.metadata-field:first');

      if (next.length !== 1) {
        return;
      }

      var currentOrder = current.find('.form-control').attr('fieldorder');
      var nextOrder = next.find('.form-control').attr('fieldorder');

      current.insertAfter(next);
    });

    $(document).on('click', '.metadata-field-delete', function () {
      $(this).closest('.form-group').remove();
    });

    $(document).on('click', '.metadata-field-delete-item', function () {
      $(this).closest('.metadata-field').remove();
    });

    $(document).on('click', '.document-viewer-close', function () {
      // TODO: Alert if modifications that aren't saved
      window.location.pathname = '/documents';
    });

    $(document).on('click', '.metadata-set-label, .metadata-field-label', function () {
      if ($(this).hasClass('form-control-plaintext')) {
        $(this).addClass('form-control').removeClass('form-control-plaintext').removeAttr('readonly').focus();
        $(this).on('keydown', null, 'return', function () {
          $(this).focusout();
        });
      }
    });

    $(document).on('focusout', '.metadata-set-label, .metadata-field-label', function () {
      if ($(this).hasClass('form-control')) {
        $(this).removeClass('form-control').addClass('form-control-plaintext').prop('readonly', true);
        $(this).off('keydown');
      }
    });

    $(document).on('change', '.form-control[fieldtype="F"]', function () {
      $(this).attr('formula', $(this).val());
    });

    $(document).on('click', '.metadata-field-type-dropdown .dropdown-item', function () {
      var fieldType = $(this).attr('fieldtype');
      var control = $(this).closest('.metadata-field').find('.form-control');

      control.attr('fieldtype', fieldType);
      if (fieldType === 'F') {
        control.removeAttr('readonly');
        control.attr('calculated', 'Please reload');
      } else {
        control.prop('readonly', true);
      }

      $(this).closest('.metadata-field-type-dropdown').siblings('.dropdown-toggle').text($(this).text());
    });
  });
</script>
