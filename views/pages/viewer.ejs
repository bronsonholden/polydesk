<div class="border border-bottom-1 border-top-0 border-left-0 border-right-0 border-secondary">
<nav class="navbar navbar-justify-content-left navbar-fixed-top justify-content-between">
  <div>
    <button type="button" class="btn btn-light btn-outline-primary document-viewer-apply">Apply</button>
    <button type="button" class="btn btn-light btn-outline-primary document-viewer-save">Save</button>
    <button type="button" class="btn btn-light btn-outline-secondary document-viewer-close">Close</button>
  </div>
  <div>
    <span class="pr-2">Zoom</span>
    <button type="button" class="btn rounded-circle btn-light btn-outline-secondary"><i class="ion-plus"></i></button>
    <button type="button" class="btn rounded-circle btn-light btn-outline-secondary"><i class="ion-minus"></i></button>
  </div>
</nav>
</div>
<div id="wrapper" class="container-fluid">
  <div class="row">
    <div id="properties" class="px-0 col-md-3 cold-lg-3">
      <form id="metadata" method="POST" action="/viewer/<%- id -%>/metadata" enctype="multipart/form-data">
        <%
        var orderedMetadataSets = Object.keys(metadataSets).sort(function (a, b) {
          if (typeof(metadataSets[a].order) === 'number' && typeof(metadataSets[b].order) !== 'number') {
            return -1;
          } else if (typeof(metadataSets[a].order) !== 'number' && typeof(metadataSets[b].order) === 'number') {
            return 1;
          } else if (typeof(metadataSets[a].order) !== 'number' && typeof(metadataSets[b].order) !== 'number') {
            return 0;
          }
          return metadataSets[a].order - metadataSets[b].order;
        });
        orderedMetadataSets.forEach(function (setName, setOrder) {
          var set = metadataSets[setName].fields;
        %>
          <div class="metadata-set" setname="<%- setName -%>" setorder="<%- setOrder -%>" locked="locked">
            <div class="px-3 pt-3">
              <div class="btn-group">
                <input class="mr-2 form-control-plaintext text-truncate metadata-set-label font-weight-bold" value="<%- setName -%>" readonly></input>
                <button class="btn rounded-circle btn-light metadata-set-lock" type="button">
                  <i class="ion-locked"></i>
                </button>
              </div>
            </div>
            <hr>
            <%
            var orderedFields = Object.keys(set).sort(function (a, b) {
              if (typeof(set[a].order) === 'number' && typeof(set[b].order) !== 'number') {
                return -1;
              } else if (typeof(set[a].order) !== 'number' && typeof(set[b].order) === 'number') {
                return 1;
              } else if (typeof(set[a].order) !== 'number' && typeof(set[b].order) !== 'number') {
                return 0;
              }
              return set[a].order - set[b].order;
            });
            orderedFields.forEach(function (key) {
            %>
              <div class="form-group pb-2 pt-3 px-3 m-0 metadata-field-wrapper">
                <input class="mb-2 form-control-plaintext metadata-field-label text-truncate" value="<%- key -%>" readonly></input>
                <%
                var value = set[key].value;
                var typeString;

                switch (set[key].type) {
                case 'N':
                  typeString = 'Number';
                  break;
                case 'P':
                  typeString = 'Precision';
                  break;
                case 'S':
                  typeString = 'String';
                  break;
                case 'B':
                  typeString = 'Boolean';
                  break;
                case 'F':
                  typeString = 'Formula';
                  value = set[key].err || set[key].calculated;
                  break;
                default:
                  break;
                }

                if (set[key].type.length === 2 && set[key].type[1] === 'L') {
                  value.forEach(function (val, idx, arr) {
                %>
                  <div class="mb-2 metadata-field">
                    <div class="input-group-prepend-locked hidden">
                      <button class="bg-light btn btn-outline-secondary metadata-field-move-item-up" type="button"><i class="icon ion-chevron-up"></i></button>
                      <button class="bg-light btn btn-outline-secondary metadata-field-move-item-down" type="button"><i class="icon ion-chevron-down"></i></button>
                    </div>
                    <input class="form-control" fieldtype="<%- set[key].type -%>" fieldorder="<%- set[key].order -%>" type="string" value="<%- val -%>"></input>
                    <div class="input-group-append-locked hidden">
                      <button class="bg-light btn btn-outline-secondary metadata-field-delete-item" type="button"><i class="icon ion-close"></i></button>
                    </div>
                  </div>
                <%
                  });
                } else {
                %>
                  <div class="metadata-field">
                    <div class="input-group-prepend-locked hidden">
                      <button class="bg-light btn btn-outline-secondary metadata-field-move-up" type="button"><i class="icon ion-chevron-up"></i></button>
                      <button class="bg-light btn btn-outline-secondary metadata-field-move-down" type="button"><i class="icon ion-chevron-down"></i></button>
                    </div>
                    <% if (set[key].type === 'F') { %>
                      <input readonly class="form-control" fieldtype="<%- set[key].type -%>" fieldorder="<%- set[key].order -%>" type="string" value="<%- value -%>" calculated="<%- value -%>" formula="<%- encodeURI(set[key].value) -%>"></input>
                    <% } else { %>
                      <input class="form-control" fieldtype="<%- set[key].type -%>" fieldorder="<%- set[key].order -%>" type="string" value="<%- value -%>"></input>
                    <% } %>
                    <div class="input-group-append-locked hidden">
                      <button class="bg-light btn btn-outline-secondary metadata-field-delete" type="button"><i class="icon ion-close"></i></button>
                      <button class="bg-light btn btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><%- typeString -%></button>
                      <div class="dropdown-menu metadata-field-type-dropdown">
                        <a class="dropdown-item" fieldtype="S" href="#">String</a>
                        <a class="dropdown-item" fieldtype="N" href="#">Number</a>
                        <a class="dropdown-item" fieldtype="B" href="#">Boolean</a>
                        <a class="dropdown-item" fieldtype="P" href="#">Precision</a>
                        <a class="dropdown-item" fieldtype="F" href="#">Formula</a>
                      </div>
                    </div>
                  </div>
              <%
              }
              %>
              </div>
            <%
            });
            %>
          </div>
        <%
        });
        %>
        <div style="height:300px;">&nbsp;</div>
      </form>
    </div>
    <div id="viewer" class="pdf-viewer offset-md-3 offset-lg-3 col-md-9 col-lg-9" data-url="<%- documentUrl -%>">
      <div id="search" class="modal" role="dialog">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Search</h5>
            </div>
            <div class="modal-body">
              <input id="search-input" type="text" placeholder="Enter your search text"></input>
            </div>
            <div class="modal-footer">
              <button id="search-next-result" type="button" class="btn">Next</button>
            </div>
          </div>
        </div>
      </div>
      <div id="growls-viewer"></div>
    </div>
  </div>
</div>
<script>
  $(document).ready(function () {
    $(document).on('click', '.metadata-set-lock', function () {
      var set = $(this).closest('.metadata-set');

      if (!set.attr('locked')) {
        set.attr('locked', 'locked');

        set.find('.metadata-field').removeClass('input-group');
        set.find('.metadata-field .input-group-prepend').removeClass('input-group-prepend metadata-field-editable').addClass('input-group-prepend-locked hidden');
        set.find('.metadata-field .input-group-append').removeClass('input-group-append metadata-field-editable').addClass('input-group-append-locked hidden');

        // Lock formula fields down, show calculated value
        set.find('.metadata-field input[fieldtype="F"]').each(function () {
          $(this).val($(this).attr('calculated'));
          $(this).prop('readonly', true);
        });

        // Make data fields editable
        set.find('.metadata-field input[fieldtype!="F"]').each(function () {
          $(this).removeAttr('readonly');
        });

        $(this).find('i').removeClass('ion-unlocked').addClass('ion-locked');
      } else {
        set.removeAttr('locked');

        set.find('.metadata-field').addClass('input-group');
        set.find('.metadata-field .input-group-prepend-locked').addClass('input-group-prepend metadata-field-editable').removeClass('input-group-prepend-locked hidden');
        set.find('.metadata-field .input-group-append-locked').addClass('input-group-append metadata-field-editable').removeClass('input-group-append-locked hidden');

        // Show formula string, allow editing
        set.find('.metadata-field input[fieldtype="F"]').each(function () {
          $(this).val(decodeURI($(this).attr('formula')));
          $(this).removeAttr('readonly');
        });

        // Disallow data field edits
        set.find('.metadata-field input[fieldtype!="F"]').each(function () {
          $(this).prop('readonly', true);
        });

        $(this).find('i').removeClass('ion-locked').addClass('ion-unlocked');
      }
    });

    // Move a field up
    $(document).on('click', '.metadata-field-move-up', function () {
      var current = $(this).closest('.form-group');
      var prev = current.prevAll('.form-group:first');

      if (prev.length !== 1) {
        return;
      }

      var currentOrder = current.find('.form-control').attr('fieldorder');
      var prevOrder = prev.find('.form-control').attr('fieldorder');

      current.insertBefore(prev);
      current.find('.form-control').attr('fieldorder', prevOrder);
      prev.find('.form-control').attr('fieldorder', currentOrder);
    });

    // Move a field down
    $(document).on('click', '.metadata-field-move-down', function () {
      var current = $(this).closest('.form-group');
      var next = current.nextAll('.form-group:first');

      if (next.length !== 1) {
        return;
      }

      var currentOrder = current.find('.form-control').attr('fieldorder');
      var nextOrder = next.find('.form-control').attr('fieldorder');

      current.insertAfter(next);
      current.find('.form-control').attr('fieldorder', nextOrder);
      next.find('.form-control').attr('fieldorder', currentOrder);
    });

    // Move an item up
    $(document).on('click', '.metadata-field-move-item-up', function () {
      var current = $(this).closest('.metadata-field');
      var prev = current.prevAll('.metadata-field:first');

      if (prev.length !== 1) {
        return;
      }

      var currentOrder = current.find('.form-control').attr('fieldorder');
      var prevOrder = prev.find('.form-control').attr('fieldorder');

      current.insertBefore(prev);
    });

    // Move an item down
    $(document).on('click', '.metadata-field-move-item-down', function () {
      var current = $(this).closest('.metadata-field');
      var next = current.nextAll('.metadata-field:first');

      if (next.length !== 1) {
        return;
      }

      var currentOrder = current.find('.form-control').attr('fieldorder');
      var nextOrder = next.find('.form-control').attr('fieldorder');

      current.insertAfter(next);
    });

    $(document).on('click', '.metadata-field-delete', function () {
      $(this).closest('.form-group').remove();
    });

    $(document).on('click', '.metadata-field-delete-item', function () {
      $(this).closest('.metadata-field').remove();
    });

    $(document).on('click', '.document-viewer-close', function () {
      // TODO: Alert if modifications that aren't saved
      window.location.pathname = '/documents';
    });

    $(document).on('click', '.metadata-set-label, .metadata-field-label', function () {
      if ($(this).hasClass('form-control-plaintext')) {
        $(this).addClass('form-control').removeClass('form-control-plaintext').removeAttr('readonly').focus();
        $(this).on('keydown', null, 'return', function () {
          $(this).focusout();
        });
      }
    });

    $(document).on('focusout', '.metadata-set-label, .metadata-field-label', function () {
      if ($(this).hasClass('form-control')) {
        $(this).removeClass('form-control').addClass('form-control-plaintext').prop('readonly', true);
        $(this).off('keydown');
      }
    });

    $(document).on('change', '.form-control[fieldtype="F"]', function () {
      $(this).attr('formula', $(this).val());
    });

    $(document).on('click', '.metadata-field-type-dropdown .dropdown-item', function () {
      var fieldType = $(this).attr('fieldtype');
      var control = $(this).closest('.metadata-field').find('.form-control');

      control.attr('fieldtype', fieldType);
      if (fieldType === 'F') {
        control.removeAttr('readonly');
        control.attr('calculated', 'Please reload');
      } else {
        control.prop('readonly', true);
      }

      $(this).closest('.metadata-field-type-dropdown').siblings('.dropdown-toggle').text($(this).text());
    });
  });
</script>
